/*
 * Copyright 2005-2010 The Kuali Foundation
 * 
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.opensource.org/licenses/ecl1.php
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.kuali.kra.diag;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Savepoint;
import java.sql.Statement;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/** this class is to be used for diagnostic purposes in regards to tracking currently opened and closed connections. */
public class TrackingConnection implements Connection {

    private static final Log LOG = LogFactory.getLog(TrackingConnection.class);
    
    private final Connection connection;

    /** wraps a connection. */
    public TrackingConnection(Connection connection) {
        if (connection == null) {
            throw new IllegalArgumentException("the connection was null");
        }
        
        try {
            ConnectionTracker.addConnection(connection);
        } catch (Throwable t) {
            //do not want to fail just for tracking logic as this could cause connection leaks
            LOG.error("could not add connection for tracking", t);
        } finally {
            this.connection = connection;    
        }
    }
    
//*******************************DELEGATE METHODS************************************************************
    
    /** {@inheritDoc} */
    public void clearWarnings() throws SQLException {
        this.connection.clearWarnings();
    }

    /** {@inheritDoc} */
    public void close() throws SQLException {
        try {
            ConnectionTracker.removeConnection(this.connection);
        } catch (Throwable t) {
            //do not want to fail just for tracking logic as this could cause connection leaks
            LOG.error("could not remove connection from tracking", t);
        } finally {
            this.connection.close();
        }
    }

    /** {@inheritDoc} */
    public void commit() throws SQLException {
        this.connection.commit();
    }

    /** {@inheritDoc} */
    public Statement createStatement() throws SQLException {
        return this.connection.createStatement();
    }

    /** {@inheritDoc} */
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return this.connection.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    /** {@inheritDoc} */
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return this.connection.createStatement(resultSetType, resultSetConcurrency);
    }

    /** {@inheritDoc} */
    public boolean getAutoCommit() throws SQLException {
        return this.connection.getAutoCommit();
    }

    /** {@inheritDoc} */
    public String getCatalog() throws SQLException {
        return this.connection.getCatalog();
    }

    /** {@inheritDoc} */
    public int getHoldability() throws SQLException {
        return this.connection.getHoldability();
    }

    /** {@inheritDoc} */
    public DatabaseMetaData getMetaData() throws SQLException {
        return this.connection.getMetaData();
    }

    /** {@inheritDoc} */
    public int getTransactionIsolation() throws SQLException {
        return this.connection.getTransactionIsolation();
    }

    /** {@inheritDoc} */
    public Map<String, Class<?>> getTypeMap() throws SQLException {
        return this.connection.getTypeMap();
    }

    /** {@inheritDoc} */
    public SQLWarning getWarnings() throws SQLException {
        return this.connection.getWarnings();
    }

    /** {@inheritDoc} */
    public boolean isClosed() throws SQLException {
        return this.connection.isClosed();
    }

    /** {@inheritDoc} */
    public boolean isReadOnly() throws SQLException {
        return this.connection.isReadOnly();
    }

    /** {@inheritDoc} */
    public String nativeSQL(String sql) throws SQLException {
        return this.connection.nativeSQL(sql);
    }

    /** {@inheritDoc} */
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)
            throws SQLException {
        return this.connection.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    /** {@inheritDoc} */
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return this.connection.prepareCall(sql, resultSetType, resultSetConcurrency);
    }

    /** {@inheritDoc} */
    public CallableStatement prepareCall(String sql) throws SQLException {
        return this.connection.prepareCall(sql);
    }

    /** {@inheritDoc} */
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)
            throws SQLException {
        return this.connection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    /** {@inheritDoc} */
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return this.connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
    }

    /** {@inheritDoc} */
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return this.connection.prepareStatement(sql, autoGeneratedKeys);
    }

    /** {@inheritDoc} */
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return this.connection.prepareStatement(sql, columnIndexes);
    }

    /** {@inheritDoc} */
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return this.connection.prepareStatement(sql, columnNames);
    }

    /** {@inheritDoc} */
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return this.connection.prepareStatement(sql);
    }

    /** {@inheritDoc} */
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        this.connection.releaseSavepoint(savepoint);
    }

    /** {@inheritDoc} */
    public void rollback() throws SQLException {
        this.connection.rollback();
    }

    /** {@inheritDoc} */
    public void rollback(Savepoint savepoint) throws SQLException {
        this.connection.rollback(savepoint);
    }

    /** {@inheritDoc} */
    public void setAutoCommit(boolean autoCommit) throws SQLException {
        this.connection.setAutoCommit(autoCommit);
    }

    /** {@inheritDoc} */
    public void setCatalog(String catalog) throws SQLException {
        this.connection.setCatalog(catalog);
    }

    /** {@inheritDoc} */
    public void setHoldability(int holdability) throws SQLException {
        this.connection.setHoldability(holdability);
    }

    /** {@inheritDoc} */
    public void setReadOnly(boolean readOnly) throws SQLException {
        this.connection.setReadOnly(readOnly);
    }

    /** {@inheritDoc} */
    public Savepoint setSavepoint() throws SQLException {
        return this.connection.setSavepoint();
    }

    /** {@inheritDoc} */
    public Savepoint setSavepoint(String name) throws SQLException {
        return this.connection.setSavepoint(name);
    }

    /** {@inheritDoc} */
    public void setTransactionIsolation(int level) throws SQLException {
        this.connection.setTransactionIsolation(level);
    }

    /** {@inheritDoc} */
    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
        this.connection.setTypeMap(map);
    }
}
