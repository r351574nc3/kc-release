insert into krns_parm_t values('KC', 'KC-AWARD', 'Document', 'CFDA_BATCH_JOB_CRON_EXPRESSION', 1, 'CONFG', '0 0 6 * * ?', 'Parameter to set the cron expression for the CFDA batch job', 'A', SYS_GUID());

insert into krns_parm_t values('KC', 'KC-AWARD', 'Document', 'CFDA_GOV_URL', 1, 'CONFG', 'ftp://ftp.cfda.gov/programs', 'Url of the CFDA FTP site for the CFDA batch job', 'A', SYS_GUID());

insert into krns_parm_t values('KC', 'KC-AWARD', 'Document', 'CFDA_BATCH_NOTIFICATION_RECIPIENT', 1, 'CONFG', '', 'Principal name of the person that should receive notifications when the CFDA batch job runs', 'A', SYS_GUID());

insert into krns_parm_t values('KC', 'KC-AWARD', 'Document', 'CFDA_BATCH_JOB_CRON_START_TIME', 1, 'CONFG', '', 'Start time of the CFDA job', 'A', SYS_GUID());

CREATE TABLE CFDA
  (
    CFDA_NBR VARCHAR2(7) NOT NULL,
    CFDA_PGM_TTL_NM varchar2(300) NOT NULL,
    CFDA_MAINT_TYP_ID varchar2(10),
    ACTIVE_FLAG VARCHAR2(1) NOT NULL,
    VER_NBR NUMBER(8) default 1 NOT NULL,
    OBJ_ID VARCHAR2(36) NOT NULL
);

ALTER TABLE CFDA
    ADD CONSTRAINT CFDA_NBR
PRIMARY KEY (CFDA_NBR);

INSERT INTO KRIM_ENTITY_T (ENTITY_ID, OBJ_ID, VER_NBR, ACTV_IND, LAST_UPDT_DT) VALUES ('1265', SYS_GUID(), 1, 'Y', SYSDATE);

INSERT INTO KRIM_ENTITY_ENT_TYP_T (ACTV_IND, OBJ_ID, VER_NBR, ENT_TYP_CD, ENTITY_ID, LAST_UPDT_DT) VALUES ('Y', SYS_GUID(), 1, 'SYSTEM', '1265', SYSDATE);


INSERT INTO KRIM_PRNCPL_T (ACTV_IND,ENTITY_ID,LAST_UPDT_DT,OBJ_ID,PRNCPL_ID,PRNCPL_NM,VER_NBR) VALUES ('Y','1265',SYSDATE, SYS_GUID(), 10000000065,'kc',1);

For Quartz jobs
-----------------
CREATE TABLE kc_qrtz_job_details
  (
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    JOB_CLASS_NAME   VARCHAR2(250) NOT NULL, 
    IS_DURABLE VARCHAR2(1) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    IS_STATEFUL VARCHAR2(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NOT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP)
);
CREATE TABLE kc_qrtz_job_listeners
  (
    JOB_NAME  VARCHAR2(200) NOT NULL, 
    JOB_GROUP VARCHAR2(200) NOT NULL,
    JOB_LISTENER VARCHAR2(200) NOT NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),
    FOREIGN KEY (JOB_NAME,JOB_GROUP) 
    REFERENCES KC_QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP)
);
CREATE TABLE kc_qrtz_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    JOB_NAME  VARCHAR2(200) NOT NULL, 
    JOB_GROUP VARCHAR2(200) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    NEXT_FIRE_TIME NUMBER(13) NULL,
    PREV_FIRE_TIME NUMBER(13) NULL,
    PRIORITY NUMBER(13) NULL,
    TRIGGER_STATE VARCHAR2(16) NOT NULL,
    TRIGGER_TYPE VARCHAR2(8) NOT NULL,
    START_TIME NUMBER(13) NOT NULL,
    END_TIME NUMBER(13) NULL,
    CALENDAR_NAME VARCHAR2(200) NULL,
    MISFIRE_INSTR NUMBER(2) NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (JOB_NAME,JOB_GROUP) 
    REFERENCES KC_QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP) 
);
CREATE TABLE kc_qrtz_simple_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    REPEAT_COUNT NUMBER(7) NOT NULL,
    REPEAT_INTERVAL NUMBER(12) NOT NULL,
    TIMES_TRIGGERED NUMBER(10) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
    REFERENCES KC_QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE kc_qrtz_cron_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    CRON_EXPRESSION VARCHAR2(120) NOT NULL,
    TIME_ZONE_ID VARCHAR2(80),
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
    REFERENCES KC_QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE kc_qrtz_blob_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
        REFERENCES KC_QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE kc_qrtz_trigger_listeners
  (
    TRIGGER_NAME  VARCHAR2(200) NOT NULL, 
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    TRIGGER_LISTENER VARCHAR2(200) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
    REFERENCES KC_QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE kc_qrtz_calendars
  (
    CALENDAR_NAME  VARCHAR2(200) NOT NULL, 
    CALENDAR BLOB NOT NULL,
    PRIMARY KEY (CALENDAR_NAME)
);
CREATE TABLE kc_qrtz_paused_trigger_grps
  (
    TRIGGER_GROUP  VARCHAR2(200) NOT NULL, 
    PRIMARY KEY (TRIGGER_GROUP)
);
CREATE TABLE kc_qrtz_fired_triggers 
  (
    ENTRY_ID VARCHAR2(95) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    FIRED_TIME NUMBER(13) NOT NULL,
    PRIORITY NUMBER(13) NOT NULL,
    STATE VARCHAR2(16) NOT NULL,
    JOB_NAME VARCHAR2(200) NULL,
    JOB_GROUP VARCHAR2(200) NULL,
    IS_STATEFUL VARCHAR2(1) NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NULL,
    PRIMARY KEY (ENTRY_ID)
);
CREATE TABLE kc_qrtz_scheduler_state 
  (
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    LAST_CHECKIN_TIME NUMBER(13) NOT NULL,
    CHECKIN_INTERVAL NUMBER(13) NOT NULL,
    PRIMARY KEY (INSTANCE_NAME)
);
CREATE TABLE kc_qrtz_locks
  (
    LOCK_NAME  VARCHAR2(40) NOT NULL, 
    PRIMARY KEY (LOCK_NAME)
);

INSERT INTO kc_qrtz_locks values('TRIGGER_ACCESS');
INSERT INTO kc_qrtz_locks values('JOB_ACCESS');
INSERT INTO kc_qrtz_locks values('CALENDAR_ACCESS');
INSERT INTO kc_qrtz_locks values('STATE_ACCESS');
INSERT INTO kc_qrtz_locks values('MISFIRE_ACCESS');
create index idx_qrtz_j_req_recovery on kc_qrtz_job_details(REQUESTS_RECOVERY);
create index idx_qrtz_t_next_fire_time on kc_qrtz_triggers(NEXT_FIRE_TIME);
create index idx_qrtz_t_state on kc_qrtz_triggers(TRIGGER_STATE);
create index idx_qrtz_t_nft_st on kc_qrtz_triggers(NEXT_FIRE_TIME,TRIGGER_STATE);
create index idx_qrtz_t_volatile on kc_qrtz_triggers(IS_VOLATILE);
create index idx_qrtz_ft_trig_name on kc_qrtz_fired_triggers(TRIGGER_NAME);
create index idx_qrtz_ft_trig_group on kc_qrtz_fired_triggers(TRIGGER_GROUP);
create index idx_qrtz_ft_trig_nm_gp on kc_qrtz_fired_triggers(TRIGGER_NAME,TRIGGER_GROUP);
create index idx_qrtz_ft_trig_volatile on kc_qrtz_fired_triggers(IS_VOLATILE);
create index idx_qrtz_ft_trig_inst_name on kc_qrtz_fired_triggers(INSTANCE_NAME);
create index idx_qrtz_ft_job_name on kc_qrtz_fired_triggers(JOB_NAME);
create index idx_qrtz_ft_job_group on kc_qrtz_fired_triggers(JOB_GROUP);
create index idx_qrtz_ft_job_stateful on kc_qrtz_fired_triggers(IS_STATEFUL);
create index idx_qrtz_ft_job_req_recovery on kc_qrtz_fired_triggers(REQUESTS_RECOVERY);



commit;